var idbKeyval=function(e){"use strict";class t{constructor(e="keyval-store",t="keyval"){this.dbName=e,this.storeName=t,this._dbp=new Promise((r,n)=>{const o=indexedDB.open(e,1);o.onerror=(()=>n(o.error)),o.onsuccess=(()=>r(o.result)),o.onupgradeneeded=(()=>{o.result.createObjectStore(t)})})}_withIDBStore(e,t){return this._dbp.then(r=>new Promise((n,o)=>{const s=r.transaction(this.storeName,e);s.oncomplete=(()=>n()),s.onabort=s.onerror=(()=>o(s.error)),t(s.objectStore(this.storeName))}))}}let r,n;function o(){return r||(r=new t),r}function s(e){return n||(n=new t(e,"keysToExpire")),r}return e.Store=t,e.get=function(e,t=o()){let r;return t._withIDBStore("readonly",t=>{r=t.get(e)}).then(()=>r.result)},e.set=function(e,t,r=0,n=o()){return n._withIDBStore("readwrite",r=>{r.put(t,e)}).then(function(){if(r){n=s(n.dbName);let t=Math.round((new Date).getTime()/1e3);n._withIDBStore("readwrite",r=>{r.put(e,t)})}})},e.del=function(e,t=o()){return t._withIDBStore("readwrite",t=>{t.delete(e)})},e.clear=function(e=o()){return e._withIDBStore("readwrite",e=>{e.clear()})},e.keys=function(e=o()){const t=[];return e._withIDBStore("readonly",e=>{(e.openKeyCursor||e.openCursor).call(e).onsuccess=function(){this.result&&(t.push(this.result.key),this.result.continue())}}).then(()=>t)},e}({});